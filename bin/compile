#!/bin/bash

#
# Heroku buildpack for Meteor
#

# fail fast.
set -e
# debug verbosely.
#set -x

get_node_major_version() {
  local node_version=`METEOR node --version`
  # major_string will be ex: "6." "8." "10"
  local major_string=${node_version:1:2}
  # strip any "."s from major_string
  local major=${major_string//.}
  echo $major
}
get_latest_release() {
    # Get latest release tag from GitHub api
    curl --silent --write-out "%{http_code}" "https://api.github.com/repos/heroku/heroku-nodejs-plugin/releases/latest" |
        grep '"tag_name":' |
        sed -E 's/.*"([^"]+)".*/\1/'
}
test_hash() {
    local major=${1}
    local dir=${2}

    local downloaded_sha=$(cat $dir/heroku-nodejs-plugin-node-$major.sha512 | awk '{print substr($0,0,128)}')
    local binary_sha=$(shasum -a 512 $dir/heroku-nodejs-plugin-node-$major.tar.gz | awk '{print substr($0,0,128)}')

    if [[ "$downloaded_sha" != "$binary_sha" ]]; then
        echo "Invalid SHA for file: $dir/heroku-nodejs-plugin-node-$major.tar.gz"
        exit 1
    else
        echo "Verified SHA for file: $dir/heroku-nodejs-plugin-node-$major.tar.gz"
    fi
}
download() {
    local url=${1}
    local file=${2}
    local code=$(curl "$url" -L --fail --retry 5 --retry-max-time 15 -o "${file}" --write-out "%{http_code}")
    if [[ "$code" != "200" ]]; then
        echo "Unable to download from url: $url http code: $code"
        exit 1
    fi
}
download_assets_for_release() {
    local tag=${1}
    local dir=${2}
    local version=${3}

    download "https://github.com/heroku/heroku-nodejs-plugin/releases/download/$tag/heroku-nodejs-plugin-node-$version-$tag.sha512" "$dir/heroku-nodejs-plugin-node-$version.sha512"
    download "https://github.com/heroku/heroku-nodejs-plugin/releases/download/$tag/heroku-nodejs-plugin-node-$version-$tag.tar.gz" "$dir/heroku-nodejs-plugin-node-$version.tar.gz"
    test_hash $version $dir
}
download_plugin() {
  local tag_name=$(get_latest_release)
  download_assets_for_release $tag_name $1 $2
}
install_plugin() {
  local bp_dir="$1"
  local build_dir="$2"
  local major=$(get_node_major_version)
  mkdir -p "${bp_dir}/plugin"
  download_plugin "${bp_dir}/plugin" $major
  local plugin="${bp_dir}/plugin/heroku-nodejs-plugin-node-${major}.tar.gz"
  # If we have a version of the plugin compiled for this version of node, and the
  # user has not opted out of including the plugin, copy it into the slug.
  # It will be included at runtime once the user opts into the Node metrics feature
  if [[ -f "${plugin}" ]] && [[ -z "$HEROKU_SKIP_NODE_PLUGIN" ]]; then
    mkdir -p "${build_dir}/.heroku/"
    tar -xzf ${plugin} -C "${build_dir}/.heroku/"
  fi
}

# Load config vars into environment (from https://devcenter.heroku.com/articles/buildpack-api)
export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir $3

# Enable verbose debugging if configured to -- though this has to come after
# we've loaded environment configs.
if [ -n "$BUILDPACK_VERBOSE" ]; then
  set -x
fi


# Get the path to dir one above this file.
BUILDPACK_DIR=$(cd -P -- "$(dirname -- "$0")" && cd .. && pwd -P)
# Get the directory our app is checked out in (the "BUILD_DIR"), passed by Heroku
APP_CHECKOUT_DIR=$1
CACHE_DIR=$2
if [ -n "$BUILDPACK_CLEAR_CACHE" ]; then
  echo "-----> Clearing cache dir."
  rm -rf "$CACHE_DIR/*"
fi

#
# Find the meteor app ($APP_SOURCE_DIR).
#

# Set meteor app dir's location to the root of the git repo, plus the value of
# METEOR_APP_DIR (which defaults empty).  If you put the meteor app in src/ or
# some other subdirectory, define METEOR_APP_DIR.
APP_SOURCE_DIR="${APP_CHECKOUT_DIR}"
if [ -n "$METEOR_APP_DIR" ]; then
  APP_SOURCE_DIR="${APP_SOURCE_DIR}/${METEOR_APP_DIR}"
fi

# Try "$APP_SOURCE_DIR/app/" if meteor app isn't there (the "Iron scaffolding
# tool" default).
if [ ! -d "$APP_SOURCE_DIR/.meteor" ] && [ -d "$APP_SOURCE_DIR/app/.meteor" ]; then
  APP_SOURCE_DIR="$APP_SOURCE_DIR/app/"
fi
if [ ! -d "$APP_SOURCE_DIR/.meteor" ]; then
  echo "FATAL: Can't find meteor app. Set METEOR_APP_DIR to the relative location of the meteor app within your repository if it's not in the root or 'app/' subdirectory.  (Tried ${APP_SOURCE_DIR})"
  exit 1
fi

# Where we will install meteor. Has to be outside the APP_CHECKOUT_DIR.
METEOR_DIR="$CACHE_DIR/meteor"
# Where we'll put things we compile.
COMPILE_DIR_SUFFIX=".meteor/heroku_build"
COMPILE_DIR="$APP_CHECKOUT_DIR"/"$COMPILE_DIR_SUFFIX"
# Try to minimize meteor's printing, unless we're running verbosely.
if [ -z "$BUILDPACK_VERBOSE" ]; then
  METEOR_PRETTY_OUTPUT=0
fi

# Create directories as needed.
mkdir -p "$APP_CHECKOUT_DIR" "$METEOR_DIR"
mkdir -p "$COMPILE_DIR" "$COMPILE_DIR/bin" "$COMPILE_DIR/lib"

cp "$BUILDPACK_DIR/lib/start.sh" "$COMPILE_DIR/start.sh"

# Set a default ROOT_URL if one is not defined. Currently, HEROKU_APP_NAME is
# only available if you enable the labs addon "Heroku Dyno Metadata":
# https://devcenter.heroku.com/articles/dyno-metadata
# This logic is duplicated in extra/root_url.sh so that it repeats on dyno
# restart.
if [ -z "$ROOT_URL" ] && [ -n "$HEROKU_APP_NAME" ] ; then
  export ROOT_URL="https://${HEROKU_APP_NAME}.herokuapp.com"
fi
if [ -z "$ROOT_URL" ] ; then
  echo "FATAL: ROOT_URL is not defined."
  exit 1
fi

#
# Install meteor
#

# Install the latest meteor, and rely on meteor to upgrade/downgrade itself to
# the .meteor/release target.
if [ -e "$METEOR_DIR/.meteor/meteor" ]; then
  echo "-----> Existing meteor installation found, using it."
else
  echo "-----> Installing meteor"
  curl -sS "https://install.meteor.com/" | HOME="$METEOR_DIR" /bin/sh
fi
# Function to execute meteor with proper HOME.
function METEOR {
  ARGS=$@
  HOME="$METEOR_DIR" "$METEOR_DIR/.meteor/meteor" $ARGS
}

#
# Build the meteor app!
#

# Change into the project directory. Once we're there, 'meteor' commands will
# run with the context of the target release (project .meteor/release) rather
# than the "latest" that is installed by install.meteor.com.
cd "$APP_SOURCE_DIR"

echo "-----> Target Meteor version: `METEOR --version`"

# Deal with non-server build targets.  Determine if we have --server-only flag
# capability (Meteor 1.3 and up).
echo "-----> Checking if this meteor version supports --server-only"
# Allow non-zero return from grep.
set +e
HAS_SERVER_ONLY=`METEOR help build | grep -e '--server-only'`
set -e
if [ -n "$HAS_SERVER_ONLY" ] ; then
  SERVER_ONLY_FLAG='--server-only'
else
  SERVER_ONLY_FLAG=""
fi
# Remove the Android platform if we don't support the --server-only flag
# (Meteor 1.2 and below).  iOS platform gets ignored properly.
if [ -z "$SERVER_ONLY_FLAG" ]; then
  echo "-----> Attempting to remove android platform."
  METEOR remove-platform android || true
  echo "-----> Moving on."
fi

# Identify the npm/node to use. We need to copy the node binary out to get the
# correct version in the built slug (e.g. 0.10.x for Meteor<1.4, 4.x for
# Meteor>=1.4).  We can't copy the whole meteor world because that's too large
# (Issue #125).

# Query node for its own path. As long as the Meteor version we got from
# install.meteor.com is >=1.3, "meteor node" is available, even if the target
# release predates that feature.
METEOR_NODE=`METEOR node -e "process.stdout.write(process.execPath)"`
METEOR_NODE_VERSION=`METEOR node --version | cut -d'v' -f 2`
# Assume npm is in the same dir as node.
METEOR_NPM="`dirname "$METEOR_NODE"`/npm"

if [ -z "$METEOR_NPM" ] || [ -z "$METEOR_NODE" ] ; then
  echo "FATAL: Can't find npm/node within meteor bundle. This is a bug. Please open an issue at https://github.com/AdmitHub/meteor-buildpack-horse.";
  exit 1
fi

# Copy node into place for production.
NODE="$COMPILE_DIR"/bin/node
cp "$METEOR_NODE" "$NODE"
chmod a+x "$NODE"

install_plugin "$BUILDPACK_DIR" "$COMPILE_DIR"

# Add npm and node path so that 1.4's npm-rebuild.js will function.
PATH="$METEOR_DIR/.meteor:`dirname $METEOR_NPM`:$COMPILE_DIR/bin:$PATH"

echo "-----> Using node: `$NODE --version`"
echo "----->    and npm: `$METEOR_NPM --version`"

# Run prebuild step
if [ -e "$APP_SOURCE_DIR"/heroku-preinstall.sh ]; then
  "$APP_SOURCE_DIR"/heroku-preinstall.sh
fi



# If we use npm on root, run npm install.  Don't use `--production` here, as we
# may need devDependencies (e.g. webpack) in order to build the meteor app.
echo "Installing npm packages"
if [ -e "$APP_SOURCE_DIR"/package.json ]; then
  echo "---> install  --omit=optional --no-optional"
  $METEOR_NPM install  --omit=optional --no-optional
fi


# Related to https://github.com/meteor/meteor/issues/2796 and
# https://github.com/meteor/meteor/issues/2606.  Some packages only build their
# assets at runtime, and thus they are not available for bundling unless meteor
# has been launched.  To opt-in to this, set BUILDPACK_PRELAUNCH_METEOR=1.
if [ -n "$BUILDPACK_PRELAUNCH_METEOR" ]; then
  echo "-----> BUILDPACK_PRELAUNCH_METEOR: Pre-launching meteor to build packages assets"
  # Remove the Android platform because it fails due to the Android tools not
  # being installed, but leave the iOS platform because it's ignored.
  METEOR remove-platform android || true
  HOME=$METEOR_DIR timeout -s9 60 $METEOR_DIR/.meteor/meteor --settings settings.json || true
fi

# Now on to bundling. Don't put the bundle in $APP_CHECKOUT_DIR during
# bundling, or it will recurse, trying to bundle up its own bundling.

echo "-----> Building Meteor app with ROOT_URL: $ROOT_URL"
BUNDLE_DEST=`mktemp -d "$BUILDPACK_DIR/build-XXXX"`

# The actual invocation of `meteor build`!
METEOR build $BUILD_OPTIONS --server $ROOT_URL $SERVER_ONLY_FLAG --directory $BUNDLE_DEST

echo "-----> Moving built slug to $COMPILE_DIR/app"
mv $BUNDLE_DEST/bundle "$COMPILE_DIR/app"
rmdir $BUNDLE_DEST

# Run npm install on the built slug; only for '--production' dependencies.	
echo "-----> Installing npm production dependencies on built slug"	
if [ -e "$COMPILE_DIR"/app/programs/server/package.json ]; then	
  cd "$COMPILE_DIR"/app/programs/server	
  $METEOR_NPM install --production	--omit=optional --no-optional
  cd "$APP_SOURCE_DIR"	
fi	

#
# Environment
#
# Add an export of PATH which includes our compile dir, etc.
echo "-----> Adding PATH environment"
mkdir -p "$APP_CHECKOUT_DIR"/.profile.d
cat > "$APP_CHECKOUT_DIR"/.profile.d/path.sh <<EOF
  #!/bin/sh
  export PATH=\$HOME/$COMPILE_DIR_SUFFIX/bin:\$PATH
  export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$HOME/$COMPILE_DIR_SUFFIX/lib
EOF

#
# Extras
#

# source scripts in 'extra' dir, if any.  Create them for custom stuff like
# binary dependencies, additional environment settings, etc.
echo "-----> Running extras"
for file in `ls "$BUILDPACK_DIR"/extra | sort`; do
  . "$BUILDPACK_DIR"/extra/$file
done

rm -rf "$APP_SOURCE_DIR"/node_modules

#
# Clear cache after build is done
#
if [ -n "$BUILDPACK_CLEAR_CACHE" ]; then
  echo "-----> Clearing cache dir."
  rm -rf $METEOR_DIR
fi

#Node metrics needs node to be in a specific place
mkdir -p $APP_CHECKOUT_DIR/.heroku/node/bin
cp $APP_CHECKOUT_DIR/.meteor/heroku_build/bin/node  $APP_CHECKOUT_DIR/.heroku/node/bin


# Run cleanup
if [ -e "$APP_SOURCE_DIR"/heroku-postinstall.sh]; then
  "$APP_SOURCE_DIR"/heroku-postinstall.sh
fi
